<h2>Image Upload Demo</h2>
<link href="~/Scripts/dropzone/css/basic.css" rel="stylesheet" />
<link href="~/Scripts/dropzone/css/dropzone.css" rel="stylesheet" />
<script src="~/Scripts/dropzone/dropzone.min.js"></script>
<script src="~/Scripts/jquery-2.1.0.min.js"></script>

@using (Html.BeginForm("Upload", "Home", FormMethod.Post, new {enctype = "multipart/form-data", @class = "dropzone", id = "dropzoneForm"}))
{
    <div class="fallback">
        <input name="file" type="file" multiple />
    </div>
}
<button id="submit-all">Submit All Files</button>



@*script>
    var myDropzone = new Dropzone("div#drop", { url: "/Market/UploadImage" });
</script>*@


<script>


    //Dropzone configurations
    Dropzone.options.dropzoneForm = {
        paramName: "file", //The name that will be used to transfer the file
        autoDiscover: false, //Disable so that it does not discover elements automatically
        uploadMultiple: true, //Allow multiple file upload
        parallelUploads: 100, //Upload parallel files upto 100
        maxFiles: 100, //no of files allowed in dropzone
        acceptedFiles: '.jpg, .png,.bmp', //allowed file types. Here, only image types are allowed
        clickable: true,
        addRemoveLinks: true,
        maxFilesize: 10, //File size in mb. Here 10 mb allowed

        //Messages
        dictDefaultMessage: 'Add files to upload by clicking or droppng them here.',
        dictInvalidFileType: 'This file type is not supported.',
        dictFileTooBig: "File size exceeded.",
        dictResponseError: 'Some error occurred while processing your request. Please contact your administrator/ vendor, if problem persists.',
        dictMaxFilesExceeded: 'The allowed maximum number of files is exceeded. Please try again later or rehresh the page.',
        dictCancelUpload: "Cancel",

        //prevents Dropzone from uploading dropped files immediately
        autoProcessQueue: false,

        //Initializes the events
        init: function () {

            var myDropzone = this; //closure

            dropZoneEvent.onComplete(myDropzone);
            dropZoneEvent.onLoad(myDropzone);
            dropZoneEvent.onSubmitAll(myDropzone);
            dropZoneEvent.onRemovedFile(myDropzone);
            dropZoneEvent.onResize(myDropzone);
        },


    };
    
   
    var dropZoneEvent =new function() {
        var onLoad = function (myDropzone) {

            $.get('/Home/DownloadFiles/', function (data, textStatus, jqXHR) {


                $.each(JSON.parse(data), function (key, value) {

                    if (value.isSuccess === "True") {
                        var mockFile = { name: value.name, size: value.size };

                        myDropzone.options.addedfile.call(myDropzone, mockFile);

                        myDropzone.options.thumbnail.call(myDropzone, mockFile, ("/UploadedImages/" + value.name));
                    }

                });

            });
        };

        var onSubmitAll = function (myDropzone) {
            $('#submit-all').on('click', function (e) {
                e.preventDefault();
                e.stopPropagation();

                if (myDropzone.files.length !== 0) {
                    myDropzone.processQueue();
                }
            });
        };

        var onRemovedFile = function (myDropzone) {
            myDropzone.on("removedfile", function (file) {

                $.post('/Home/DeleteFile/', { data: file.name }, function (data, textStatus, jqXHR) {
                    var result = $.parseJSON(data);
                    if (result.message.length != 0)
                        alert(result.message);
                });

                removeFile(file);
            });
        };

        var onResize = function (myDropzone) {

            myDropzone.on("resize", function (file) {
                var info;

                // drawImage(image, srcX, srcY, srcWidth, srcHeight, trgX, trgY, trgWidth, trgHeight) takes an image, clips it to
                // the rectangle (srcX, srcY, srcWidth, srcHeight), scales it to dimensions (trgWidth, trgHeight), and draws it
                // on the canvas at coordinates (trgX, trgY).
                info = {
                    srcX: 0,
                    srcY: 0,
                    srcWidth: file.width,
                    srcHeight: file.height,
                    trgX: 0,
                    trgY: 0,
                    trgWidth: this.options.thumbnailWidth,
                    trgHeight: parseInt(this.options.thumbnailWidth * file.height / file.width)
                };

                return info;
            });
        };

        var removeFile = function (file) {

            var ref;
            return (ref = file.previewElement) != null ? ref.parentNode.removeChild(file.previewElement) : void 0;
        };

        var onComplete = function (myDropzone) {

            myDropzone.on("complete", function (data) {

                myDropzone.on("error", function (file, errorMessage, xhr) {

                    if (errorMessage === "") {
                        var res = eval('(' + data.xhr.responseText + ')');

                        alert(res.Message);
                    }
                });
            });
        };
        return {
            onLoad: onLoad,
            onSubmitAll: onSubmitAll,
            onRemovedFile: onRemovedFile,
            onResize : onResize,
            onComplete : onComplete
        };
    };
    

       
</script>